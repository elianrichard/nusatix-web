generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model events {
  event_id                 Int       @id @default(autoincrement())
  event_name               String    @db.VarChar(255)
  event_description        String?
  event_image_url          String?   @db.VarChar(255)
  event_overall_start_date DateTime? @db.Date
  event_overall_end_date   DateTime? @db.Date
  event_overall_start_time DateTime? @db.Time(6)
  event_overall_end_time   DateTime? @db.Time(6)
  venue_address            String?
  default_sol_price        Decimal?  @default(0) @db.Decimal(20, 8)
  is_active                Boolean?  @default(true)
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)
  shows                    shows[]

  @@index([is_active], map: "idx_event_is_active")
  @@index([event_name], map: "idx_event_name")
}

model shows {
  show_id                    Int       @id @default(autoincrement())
  event_id                   Int
  show_name                  String?   @db.VarChar(255)
  show_date                  DateTime  @db.Date
  show_start_time            DateTime  @db.Time(6)
  show_end_time              DateTime? @db.Time(6)
  sol_price                  Decimal?  @db.Decimal(20, 8)
  metadata_template_ipfs_cid String?   @db.VarChar(255)
  total_tickets              Int?      @default(0)
  tickets_sold               Int?      @default(0)
  is_active                  Boolean?  @default(true)
  created_at                 DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime? @default(now()) @db.Timestamptz(6)
  events                     events    @relation(fields: [event_id], references: [event_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event")
  tickets                    tickets[]

  @@index([show_date], map: "idx_show_date")
  @@index([event_id], map: "idx_shows_event_id")
  @@index([is_active], map: "idx_shows_is_active")
}

model tickets {
  ticket_id            Int       @id @default(autoincrement())
  show_id              Int
  owner_wallet_address String    @db.VarChar(255)
  nft_mint_address     String    @unique @db.VarChar(255)
  nft_metadata_url     String    @db.VarChar(255)
  purchase_price_sol   Decimal?  @db.Decimal(20, 8)
  purchase_price_idr   Decimal?  @db.Decimal(15, 2)
  seat_info            String?   @db.VarChar(100)
  is_checked_in        Boolean?  @default(false)
  purchased_at         DateTime? @default(now()) @db.Timestamptz(6)
  shows                shows     @relation(fields: [show_id], references: [show_id], onUpdate: NoAction, map: "fk_show")

  @@index([nft_mint_address], map: "idx_ticket_nft_mint_address")
  @@index([owner_wallet_address], map: "idx_ticket_owner_wallet")
  @@index([show_id], map: "idx_ticket_show_id")
}
